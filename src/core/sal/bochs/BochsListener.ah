#ifndef __BOCHSLISTENER_AH__
  #define __BOCHSLISTENER_AH__

#include "config/VariantConfig.hpp"
#include "config/FailConfig.hpp"

#if defined(BUILD_BOCHS) && defined(CONFIG_EVENT_BREAKPOINTS)

#include "bochs.h"
#include "BochsController.hpp"

aspect BochsListener
{
	advice "fail::TimerListener" : slice class
	{
	public:
		bool onAddition()
		{
			// Register the timer listener in the Bochs simulator:
			setId(m_registerTimer(this));
			if(getId() == -1)
				return false; // unable to register the timer (error in Bochs' function call)
			return true;
		}

		void onDeletion()
		{
			// Unregister the time listener:
			m_unregisterTimer(this);
		}

	private:
		timer_id_t m_registerTimer(TimerListener* pev)
		{
			assert(pev != NULL && "FATAL ERROR: TimerListener object ptr cannot be NULL!");
			return static_cast<timer_id_t>(
				bx_pc_system.register_timer(pev, BochsController::onTimerTrigger, pev->getTimeout(),
					false, 1/*start immediately*/, "Fail*: BochsController"/*name*/));
		}

		bool m_unregisterTimer(TimerListener* pev)
		{
			assert(pev != NULL && "FATAL ERROR: TimerListener object ptr cannot be NULL!");
			bx_pc_system.deactivate_timer(static_cast<unsigned>(pev->getId()));
			return bx_pc_system.unregisterTimer(static_cast<unsigned>(pev->getId()));
		}
	};
};

#endif // BUILD_BOCHS && CONFIG_EVENT_BREAKPOINTS
#endif // __BOCHSLISTENER_AH__
