### Setup search paths for headers ##
include_directories(${CMAKE_CURRENT_BINARY_DIR}/core)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/core)
# Note: CMAKE_CURRENT_BINARY_DIR is needed to find "FailConfig.hpp", which
#       is generated by CMake from config/FailConfig.hpp.in and stored in
#       your build-dir. (The same goes for "FailControlMessage.pb.h", etc.)
#       This is done in the "src"-folder because experiments need to include
#       Fail* headers as well (see hierarchy of CMakeLists.txt's).

## Add CMakeLists from subdirectories ##
# The Fail* core source files (and it's subdirectories):
add_subdirectory(core)

# Here we add all user-defined experiments (which fills the target list)
add_subdirectory(experiments/)
message(STATUS "[${PROJECT_NAME}] Chosen experiment targets:")
foreach(experiment_name ${EXPERIMENTS_ACTIVATED})
    message(STATUS "[${PROJECT_NAME}] -> ${experiment_name}")
endforeach(experiment_name)

# Here we add activated plugins
add_subdirectory(plugins/)
message(STATUS "[${PROJECT_NAME}] Chosen plugin targets:")
foreach(plugin_name ${PLUGINS_ACTIVATED})
    message(STATUS "[${PROJECT_NAME}] -> ${plugin_name}")
endforeach(plugin_name)

## Merge all resulting Fail* libs into a single libfail.a and copy it into the fail source directory
add_custom_target(fail
	COMMAND ${CMAKE_SOURCE_DIR}/cmake/mergelib.sh ${LIBRARY_OUTPUT_PATH} && ${CMAKE_COMMAND} -E copy ${LIBRARY_OUTPUT_PATH}/libfail.a ${CMAKE_SOURCE_DIR}/src
)
# FIXME: "libfail.a" should not be located in the source-tree...?!

## Setup build dependencies of the Fail* lib 
## -> the Fail* targets and user defined experiment targets
add_dependencies(fail sal util cpn efw comm protomessages ${EXPERIMENTS_ACTIVATED} ${PLUGINS_ACTIVATED})

# Let make clean also delete libfail.a
set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES ${LIBRARY_OUTPUT_PATH}/libfail.a)
